// prisma/schema.prisma
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  
   
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}


model User {
  id                    String                @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String?               @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole              @default(USER)
  profession            String?
  preferences           String[]
  accounts              Account[]
  isTwoFactorEnabled    Boolean               @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  documents             Document[]
}

model Account {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  userId               String
  type                 String
  provider             String
  providerAccountId    String
  refresh_token        String?  @db.String
  access_token         String?  @db.String
  expires_at           Int?
  token_type           String?
  scope                String?
  id_token             String?  @db.String
  session_state        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id      String @id @default(auto()) @map("_id") @db.ObjectId

  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Document {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  email           String
  title           String
  courses         Json      @default("[]")

  user            User      @relation(fields: [email], references: [email], onDelete: Cascade)
  createdAt       DateTime  @default(now()) @map("createdAt")
  updatedAt       DateTime  @updatedAt @map("updatedAt")

}
